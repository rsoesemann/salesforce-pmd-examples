<?xml version="1.0" ?>
<ruleset name="Default Apex" xmlns="http://pmd.sourceforge.net/ruleset/2.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd">

    <description>Default Apex ruleset</description>

    <rule name="SoqlOnlyInSelectorsOrTests" language="apex" message="SOQL queries can only appear in test methods and accessor classes" class="net.sourceforge.pmd.lang.apex.rule.ApexXPathRule">
        <priority>2</priority>
        <properties>
           <property name="version" value="2.0"/>
           <property name="xpath">
              <value>
                 <![CDATA[
                //UserClass[not(ends-with(@Image, 'Selector'))]/Method/ModifierNode[@Test=false()]/..//(SoqlExpression | MethodCallExpression[lower-case(@FullMethodName)='database.query'])
                ]]>
              </value>
           </property>
        </properties>
     </rule>

     <rule name="SoqlRequiresUserMode" language="apex" message="SOQL Statements should use WITH USER MODE" class="net.sourceforge.pmd.lang.apex.rule.ApexXPathRule">
        <priority>2</priority>
        <properties>
           <property name="version" value="2.0"/>
           <property name="xpath">
              <value>
                 <![CDATA[
                 //SoqlExpression[not(ends-with(@Query, 'WITH USER_MODE'))]
                ]]>
              </value>
           </property>
        </properties>
     </rule>


     <rule name="NullValueCheckBeforeEmptyCheck" language="apex" message="Apex code must check != null before .isEmpty()" class="net.sourceforge.pmd.lang.rule.XPathRule">
        <priority>2</priority>
        <properties>
            <property name="version" value="2.0"/>
            <property name="xpath">
            <value>
                <![CDATA[
                //BooleanExpression[@Op="&&"][
                    child::*[2][
                    self::BooleanExpression[@Op="!="][
                        child::*[1][self::VariableExpression] and
                        child::*[2][self::LiteralExpression[@LiteralType="NULL"]]
                    ]
                    ]
                ]
                ]]>
            </value>
          </property>
        </properties>
      </rule>
</ruleset>
